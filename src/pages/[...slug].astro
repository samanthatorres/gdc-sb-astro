---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import BaseLayout from "../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const storyblokApi = useStoryblokApi();

  const version =
    import.meta.env.DEV || import.meta.env.BUILD_TYPE === "preview"
      ? "draft"
      : "published";

  const data = await storyblokApi.getAll("cdn/stories", { version });

  return data
    .filter((story) => {
      // Always exclude testimonials
      if (story.content.component === "testimonial") {
        return false;
      }
      
      // For authors, check the custom boolean field
      if (story.content.component === "author") {
        return story.content.profile_page === true;
      }
      
      // Include all other story types
      return true;
    })
    .map((story) => {
      return {
        params: { slug: story.full_slug },
      };
    });
}

const { slug } = Astro.params;

const storyblokApi = useStoryblokApi();

const version =
  import.meta.env.DEV || import.meta.env.BUILD_TYPE === "preview"
    ? "draft"
    : "published";

const { data } = await storyblokApi.get(`cdn/stories/${slug}`, {
  version: version,
  resolve_links: "url",
  resolve_relations: ['featured_blogs.blogs'],
});

const story = data.story;
const storySEO = {
  title: story.content.page_title,
  description: story.content.meta_description,
  ogImage: story.content.og_image?.filename,
  metaRobots: story.content.noindex,
  schema: story.content.schema
};
---

<BaseLayout
  title={storySEO.title}
  description={storySEO.description}
  ogImage={storySEO.ogImage}
  metaRobots={storySEO.metaRobots}
  schema={storySEO.schema}
>
  <StoryblokComponent blok={story.content} />
</BaseLayout>
